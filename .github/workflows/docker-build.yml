name: Docker - 按需镜像构建

on:
  # ===== 手动触发 =====
  workflow_dispatch:
    inputs:
      target_platform:
        description: 'Target Platform (目标平台)'
        required: true
        default: 'linux'
        type: choice
        options:
          - linux    # 仅Linux平台 (多架构 amd64/arm64)
          - windows  # 仅Windows平台 (amd64)
          - all      # 所有平台 (Linux + Windows)

  # ===== PR 评论触发 =====
  # 当在PR下方回复特定命令时触发Docker构建
  issue_comment:
    types: [created]

jobs:
  # ===== PR评论处理 =====
  pr-comment-trigger:
    if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    outputs:
      trigger-docker: ${{ steps.check-comment.outputs.trigger }}
      docker-platform: ${{ steps.check-comment.outputs.platform }}
      pr-number: ${{ github.event.issue.number }}
      pr-branch: ${{ steps.get-pr-branch.outputs.branch }}

    steps:
      - name: 🔍 检查PR评论触发条件
        id: check-comment
        run: |
          COMMENT="${{ github.event.comment.body }}"
          echo "收到PR评论: $COMMENT"

          TRIGGER_FOUND=false
          PLATFORM="linux"

          # 检查是否有构建触发关键词
          if echo "$COMMENT" | grep -q '\bdocker-push\b'; then
            TRIGGER_FOUND=true
            echo "检测到Docker构建触发指令"
          fi

          # 检查平台指定 (默认为linux)
          if echo "$COMMENT" | grep -q '\bwindows\b'; then
            PLATFORM="windows"
            echo "指定Windows平台构建"
          elif echo "$COMMENT" | grep -q '\ball\b'; then
            PLATFORM="all"
            echo "指定所有平台构建"
          else
            echo "使用默认Linux平台"
          fi

          echo "trigger=$TRIGGER_FOUND" >> $GITHUB_OUTPUT
          echo "platform=$PLATFORM" >> $GITHUB_OUTPUT

      - name: 📋 获取PR分支信息
        if: ${{ steps.check-comment.outputs.trigger == 'true' }}
        id: get-pr-branch
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.issue.number;
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            return pr.head.ref;

      - name: ✅ 确认触发条件
        if: ${{ steps.check-comment.outputs.trigger == 'true' }}
        run: |
          echo "🚀 Docker构建已触发!"
          echo "📝 PR: #${{ steps.pr-comment-trigger.outputs.pr-number }}"
          echo "🌿 分支: ${{ steps.pr-comment-trigger.outputs.pr-branch }}"
          echo "🎯 平台: ${{ steps.check-comment.outputs.platform }}"

          # 在这里可以发送通知或记录触发信息
          echo "触发表格时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> triggered-builds.log

      - name: ❌ 构建未触发
        if: ${{ steps.check-comment.outputs.trigger != 'true' }}
        run: |
          echo "ℹ️  此PR评论不满足Docker构建触发条件"
          echo "💡 可使用的触发关键词:"
          echo "   - docker-push"
          echo "📄 可选参数:"
          echo "   - platform: linux, windows, all"
          echo "🛠️  示例: 'docker-push linux'"

  # ===== Docker镜像构建 =====
  docker-build:
    needs: pr-comment-trigger
    if: ${{ needs.pr-comment-trigger.outputs.trigger-docker == 'true' || github.event_name == 'workflow_dispatch' }}
    name: 'Docker镜像构建'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 如果是通过PR触发的，使用PR的分支
          ref: ${{ github.event_name == 'workflow_dispatch' && 'main' || needs.pr-comment-trigger.outputs.pr-branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile application
        run: npm run compile

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
            network=host

      - name: Set up QEMU for cross-platform
        if: ${{ needs.pr-comment-trigger.outputs.trigger-docker == 'true' && needs.pr-comment-trigger.outputs.docker-platform == 'all' || needs.pr-comment-trigger.outputs.docker-platform == 'linux' || github.event.inputs.target_platform == 'all' || github.event.inputs.target_platform == 'linux' }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: flowerrealm
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Get build metadata
        id: meta
        run: |
          VERSION=$(node -p "require('./package.json').version")

          # 确定目标平台
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TARGET_PLATFORM="${{ github.event.inputs.target_platform }}"
          else
            TARGET_PLATFORM="${{ needs.pr-comment-trigger.outputs.docker-platform }}"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "target_platform=$TARGET_PLATFORM" >> $GITHUB_OUTPUT
          echo "trigger_method=${{ github.event_name }}" >> $GITHUB_OUTPUT
          echo "pr_number=${{ needs.pr-comment-trigger.outputs.pr-number || github.run_number }}" >> $GITHUB_OUTPUT

      - name: 💚 Build and push Linux images
        if: ${{ steps.meta.outputs.target_platform == 'all' || steps.meta.outputs.target_platform == 'linux' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            flowerrealm/oi-code-clang:latest
            flowerrealm/oi-code-clang:v${{ steps.meta.outputs.version }}
            flowerrealm/oi-code-clang:v${{ steps.meta.outputs.version }}-amd64
            flowerrealm/oi-code-clang:v${{ steps.meta.outputs.version }}-arm64
            flowerrealm/oi-code-clang:pr-${{ steps.meta.outputs.pr_number }}
          cache-from: type=registry,ref=flowerrealm/oi-code-clang:cache-amd64
          cache-to: type=registry,ref=flowerrealm/oi-code-clang:cache-amd64,mode=max
          provenance: true
          sbom: true
          labels: |
            org.opencontainers.image.title=OI-Code Clang Container
            org.opencontainers.image.description=Multi-platform Clang 18.1.8 compiler for OI competitive programming
            org.opencontainers.image.source=https://github.com/FlowerRealm/oi-code-extension
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.vendor=FlowerRealm
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            com.flowerrealm.language=c,cpp
            com.flowerrealm.compiler=clang-18
            com.flowerrealm.build.trigger=${{ steps.meta.outputs.trigger_method }}
            com.flowerrealm.build.pr=${{ steps.meta.outputs.pr_number }}

      - name: 🪟 Build and push Windows images
        if: ${{ steps.meta.outputs.target_platform == 'all' || steps.meta.outputs.target_platform == 'windows' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.windows
          platforms: windows/amd64
          push: true
          tags: |
            flowerrealm/oi-code-clang:latest-win
            flowerrealm/oi-code-clang:v${{ steps.meta.outputs.version }}-win
            flowerrealm/oi-code-clang:pr-${{ steps.meta.outputs.pr_number }}-win
          cache-from: type=registry,ref=flowerrealm/oi-code-clang:cache-win
          cache-to: type=registry,ref=flowerrealm/oi-code-clang:cache-win,mode=max
          provenance: true
          sbom: true
          labels: |
            org.opencontainers.image.title=OI-Code Clang Container Windows
            org.opencontainers.image.description=Windows Clang 18.1.8 compiler container for OI competitive programming
            org.opencontainers.image.source=https://github.com/FlowerRealm/oi-code-extension
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.vendor=FlowerRealm
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            com.flowerrealm.language=c,cpp
            com.flowerrealm.compiler=clang-18
            com.flowerrealm.build.trigger=${{ steps.meta.outputs.trigger_method }}
            com.flowerrealm.build.pr=${{ steps.meta.outputs.pr_number }}

      - name: 📊 生成构建报告
        run: |
          echo "## 🐳 Docker 镜像构建报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ 构建状态: 成功" >> $GITHUB_STEP_SUMMARY
          echo "| 属性 | 值 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| 版本 | v${{ steps.meta.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 平台 | ${{ steps.meta.outputs.target_platform }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 触发方式 | ${{ steps.meta.outputs.trigger_method }} |" >> $GITHUB_STEP_SUMMARY
          echo "| PR号 | #${{ steps.meta.outputs.pr_number }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 构建时间 | $(date +'%Y-%m-%d %H:%M:%S') |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏗️ 构建详情" >> $GITHUB_STEP_SUMMARY
          echo "- Base Image: Ubuntu 24.04 LTS / Windows Server Core" >> $GITHUB_STEP_SUMMARY
          echo "- Clang Version: 18.1.8" >> $GITHUB_STEP_SUMMARY
          echo "- Build Tools: make, cmake, gdb, lldb" >> $GITHUB_STEP_SUMMARY
          echo "- Cache: Enabled with registry backend" >> $GITHUB_STEP_SUMMARY
          echo "- SBOM + Provenance: Enabled" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 发布镜像列表" >> $GITHUB_STEP_SUMMARY
          docker images flowerrealm/oi-code-clang --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" || echo "镜像列表获取失败"

      - name: 💬 在PR中发布构建结果
        if: ${{ github.event_name == 'issue_comment' && needs.pr-comment-trigger.outputs.trigger-docker == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: '${{ needs.pr-comment-trigger.outputs.pr-number }}'
            });

            const commentBody = `
            ## 🐳 Docker 镜像构建完成

            ✅ **构建成功！** Docker 镜像已发布到 Docker Hub

            📊 **构建信息：**
            - 版本: \`v${{ steps.meta.outputs.version }}\`
            - 平台: \`${{ steps.meta.outputs.target_platform }}\`
            - 构建号: \`${{ github.run_number }}\`
            - 提交: \`${{ github.sha }}\`

            📦 **发布镜像：**
            - \`flowerrealm/oi-code-clang:latest\`
            - \`flowerrealm/oi-code-clang:v${{ steps.meta.outputs.version }}\`
            - \`flowerrealm/oi-code-clang:pr-${{ steps.meta.outputs.pr_number }}\`

            🔗 **查看详情：** [${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ---
            _此消息由 GitHub Actions 自动生成_
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: '${{ needs.pr-comment-trigger.outputs.pr-number }}',
              body: commentBody
            });
