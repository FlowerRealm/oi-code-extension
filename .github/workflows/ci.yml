name: OI-Code Manual Build

on:
  # 仅支持手动触发 - 只有手动点击才会运行
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type (选择构建类型)'
        required: true
        default: 'full'
        type: choice
        options:
          - full     # 完整构建 (测试 + 部署)
          - test     # 仅运行测试
          - deploy   # 仅构建和发布镜像
          - cleanup  # 清理缓存
      target_platform:
        description: 'Target Platform (目标平台)'
        required: true
        default: 'all'
        type: choice
        options:
          - all      # 所有平台 (Linux + Windows)
          - linux    # 仅Linux平台
          - windows  # 仅Windows平台
      environment:
        description: 'Target Environment (目标环境)'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  # 仅在选择测试或完整构建时运行
  test:
    if: ${{ inputs.build_type == 'full' || inputs.build_type == 'test' }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-13, windows-11-arm, ubuntu-24.04-arm]
    runs-on: ${{ matrix.os }}
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          if command -v xvfb-run &> /dev/null; then
            xvfb-run -a npm test
          else
            npm test
          fi
        shell: bash
        env:
          # Let the tests decide based on Docker availability
          DOCKER_ENV_TEST: true

  # 仅在选择部署或完整构建时运行
  deploy-docker:
    if: ${{ inputs.build_type == 'full' || inputs.build_type == 'deploy' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Compile application
        run: npm run compile

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU for cross-platform
        if: ${{ inputs.target_platform == 'all' || inputs.target_platform == 'linux' }}
        uses: docker/setup-qemu-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: flowerrealm
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Configure BuildKit
        run: |
          echo "🔧 Configuring Docker BuildKit for multi-platform builds..."
          docker buildx create --use --name oi-code-builder --driver docker-container
          docker buildx inspect oi-code-builder

      - name: Get version tag
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Linux images
        if: ${{ inputs.target_platform == 'all' || inputs.target_platform == 'linux' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            flowerrealm/oi-code-clang:latest
            flowerrealm/oi-code-clang:v${{ steps.version.outputs.version }}
            flowerrealm/oi-code-clang:v${{ steps.version.outputs.version }}-amd64
            flowerrealm/oi-code-clang:v${{ steps.version.outputs.version }}-arm64
            flowerrealm/oi-code-clang:amd64
            flowerrealm/oi-code-clang:arm64
          cache-from: type=registry,ref=flowerrealm/oi-code-clang:cache
          cache-to: type=registry,ref=flowerrealm/oi-code-clang:cache,mode=max
          provenance: true
          sbom: true
          labels: |
            org.opencontainers.image.title=OI-Code Clang Container
            org.opencontainers.image.description=Multi-platform Clang 18.1.8 compiler container for OI competitive programming
            org.opencontainers.image.authors=FlowerRealm
            org.opencontainers.image.source=https://github.com/FlowerRealm/oi-code-extension
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.vendor=FlowerRealm
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            com.flowerrealm.language=c,cpp
            com.flowerrealm.compiler=clang-18

      - name: Build and push Windows images
        if: ${{ inputs.target_platform == 'all' || inputs.target_platform == 'windows' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.windows
          push: true
          platforms: windows/amd64
          tags: |
            flowerrealm/oi-code-clang:latest-win
            flowerrealm/oi-code-clang:v${{ steps.version.outputs.version }}-win
            flowerrealm/oi-code-clang:v${{ steps.version.outputs.version }}-amd64-win
            flowerrealm/oi-code-clang:amd64-win
          cache-from: type=registry,ref=flowerrealm/oi-code-clang:cache-win
          cache-to: type=registry,ref=flowerrealm/oi-code-clang:cache-win,mode=max
          provenance: true
          sbom: true
          labels: |
            org.opencontainers.image.title=OI-Code Clang Container Windows
            org.opencontainers.image.description=Windows Clang 18.1.8 compiler container for OI competitive programming
            org.opencontainers.image.authors=FlowerRealm
            org.opencontainers.image.source=https://github.com/FlowerRealm/oi-code-extension
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.vendor=FlowerRealm
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            com.flowerrealm.language=c,cpp
            com.flowerrealm.compiler=clang-18

  # 仅在选择清理时运行
  cleanup:
    if: ${{ inputs.build_type == 'cleanup' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: flowerrealm
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Clean up old Docker images and caches
        run: |
          echo "🧹 Cleaning up Docker images and caches..."

          # 清理本地 Docker 系统
          docker system prune -f

          # 清理 builder 缓存
          docker builder prune --all -f

          # 删除旧的 Docker 镜像 (保留最近5个版本)
          IMAGE_LIST=$(docker images flowerrealm/oi-code-clang --format "{{.Repository}}:{{.Tag}}\t{{.CreatedSince}}" | sort -k2 -r | tail -n +6 | cut -f1)
          if [ -n "$IMAGE_LIST" ]; then
            echo "删除旧镜像:"
            echo "$IMAGE_LIST"
            docker rmi $IMAGE_LIST || true
          fi

          # 显示清理后的状态
          echo ""
          echo "🗃️  Docker 磁盘使用情况:"
          docker system df

          echo ""
          echo "📦 当前镜像数量:"
          docker images flowerrealm/oi-code-clang --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
