name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-13, windows-11-arm, ubuntu-24.04-arm]
    runs-on: ${{ matrix.os }}
    environment:
      name: check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          if command -v xvfb-run &> /dev/null; then
            xvfb-run -a npm test
          else
            npm test
          fi
        shell: bash
        env:
          # Let the tests decide based on Docker availability
          DOCKER_ENV_TEST: true

  deploy-docker:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Compile application
        run: npm run compile

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: flowerrealm
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get version tag
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push multi-platform image
        uses: docker/build-push-action@v5
        with:
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          tags: |
            flowerrealm/oi-code-clang:latest
            flowerrealm/oi-code-clang:v${{ steps.version.outputs.version }}
          cache-from: type=registry,ref=flowerrealm/oi-code-clang:buildcache
          cache-to: type=registry,ref=flowerrealm/oi-code-clang:buildcache,mode=max
          labels: |
            org.opencontainers.image.title=OI-Code Clang
            org.opencontainers.image.description=Multi-platform Clang compiler for OI competitive programming
            org.opencontainers.image.source=https://github.com/FlowerRealm/oi-code-extension
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate build report
        run: |
          echo "## 🐳 Docker Multi-Platform Build Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Build Status: Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: latest, v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache**: Enabled with registry storage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏗️ Build Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: flowerrealm/oi-code-clang" >> $GITHUB_STEP_SUMMARY
          echo "- **Base**: Ubuntu 24.04 LTS" >> $GITHUB_STEP_SUMMARY
          echo "- **Tools**: Clang 18.1.8, LLVM, LLDB, Valgrind" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Usage Instructions" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm flowerrealm/oi-code-clang:latest clang --version" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm flowerrealm/oi-code-clang:v${{ steps.version.outputs.version }} clang++ --version" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
