name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-13, windows-11-arm, ubuntu-24.04-arm]
    runs-on: ${{ matrix.os }}
    environment:
      name: check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          if command -v xvfb-run &> /dev/null; then
            xvfb-run -a npm test
          else
            npm test
          fi
        shell: bash
        env:
          # Let the tests decide based on Docker availability
          DOCKER_ENV_TEST: true

  deploy-docker:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Compile application
        run: npm run compile

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: flowerrealm
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure BuildKit
        run: |
          echo "🔧 Configuring Docker BuildKit for multi-platform builds..."
          docker buildx create --use --name multiarch-builder --driver docker-container
          docker buildx inspect multiarch-builder

      - name: Get version tag
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push multi-platform images (Linux only)
        uses: docker/build-push-action@v5
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          file: Dockerfile
          context: .
          tags: |
            flowerrealm/oi-code-clang:latest
            flowerrealm/oi-code-clang:v${{ steps.version.outputs.version }}
            flowerrealm/oi-code-clang:v${{ steps.version.outputs.version }}-amd64
            flowerrealm/oi-code-clang:v${{ steps.version.outputs.version }}-arm64
            flowerrealm/oi-code-clang:amd64
            flowerrealm/oi-code-clang:arm64
          cache-from: type=registry,ref=flowerrealm/oi-code-clang:cache
          cache-to: type=registry,ref=flowerrealm/oi-code-clang:cache,mode=max
          provenance: true
          sbom: true
          labels: |
            org.opencontainers.image.title=OI-Code Clang Container
            org.opencontainers.image.description=Multi-platform Clang 18.1.8 compiler container for OI competitive programming
            org.opencontainers.image.authors=FlowerRealm
            org.opencontainers.image.source=https://github.com/FlowerRealm/oi-code-extension
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.vendor=FlowerRealm
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            com.flowerrealm.language=c,cpp
            com.flowerrealm.compiler=clang-18
            com.flowerrealm.tools=clang-18,clang++,gcc,g++,boost,gmp,mpfr

      - name: Build and push Windows multi-platform images
        uses: docker/build-push-action@v5
        with:
          push: true
          platforms: windows/amd64,windows/arm64
          file: Dockerfile.windows
          context: .
          tags: |
            flowerrealm/oi-code-clang:latest-win
            flowerrealm/oi-code-clang:v${{ steps.version.outputs.version }}-win
            flowerrealm/oi-code-clang:v${{ steps.version.outputs.version }}-amd64-win
            flowerrealm/oi-code-clang:v${{ steps.version.outputs.version }}-arm64-win
            flowerrealm/oi-code-clang:amd64-win
            flowerrealm/oi-code-clang:arm64-win
          cache-from: type=registry,ref=flowerrealm/oi-code-clang:cache
          cache-to: type=registry,ref=flowerrealm/oi-code-clang:cache,mode=max
          provenance: true
          sbom: true
          labels: |
            org.opencontainers.image.title=OI-Code Clang Container
            org.opencontainers.image.description=Multi-platform Clang 18.1.8 compiler container for OI competitive programming
            org.opencontainers.image.authors=FlowerRealm
            org.opencontainers.image.source=https://github.com/FlowerRealm/oi-code-extension
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.vendor=FlowerRealm
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            com.flowerrealm.language=c,cpp
            com.flowerrealm.compiler=clang-18
            com.flowerrealm.tools=gcc,g++,llvm

      - name: Verify Docker Hub push
        run: |
          echo "🔍 Verifying Docker Hub image push..."
          echo "📦 Image: flowerrealm/oi-code-clang:latest"
          echo "🏷️ Version: v${{ steps.version.outputs.version }}"
          echo ""

          # Test image pull
          echo "Testing image pull from Docker Hub..."
          docker pull flowerrealm/oi-code-clang:latest || echo "❌ Failed to pull latest tag"
          docker pull flowerrealm/oi-code-clang:v${{ steps.version.outputs.version }} || echo "❌ Failed to pull version tag"

          echo "✅ Docker Hub verification complete"

      - name: Create multi-architecture manifest
        run: |
          echo "📋 Creating multi-architecture manifest..."

          # Amplify manifest
          docker buildx imagetools inspect flowerrealm/oi-code-clang:latest

      - name: Generate build report
        run: |
          echo "## 🐳 Docker Multi-Platform Build Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Build Status: Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: linux/amd64, linux/arm64, windows/amd64, windows/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: latest, v${{ steps.version.outputs.version }} + platform-specific variants" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache**: Enabled with registry storage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏗️ Build Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: flowerrealm/oi-code-clang" >> $GITHUB_STEP_SUMMARY
          echo "- **Base**: Ubuntu 24.04 LTS (Linux amd64/arm64)" >> $GITHUB_STEP_SUMMARY
          echo "- **Clang Version**: 18.1.8 with libc++" >> $GITHUB_STEP_SUMMARY
          echo "- **GCC Compatibility**: Full GCC toolchain included" >> $GITHUB_STEP_SUMMARY
          echo "- **Competitive Libraries**: Boost, GMP, MPFR for advanced algorithms" >> $GITHUB_STEP_SUMMARY
          echo "- **Debug Tools**: LLDB, Valgrind, cppcheck, clang-format" >> $GITHUB_STEP_SUMMARY
          echo "- **User**: Non-privileged runner user for security" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check**: Automatic container monitoring" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Available Tags" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Main tags" >> $GITHUB_STEP_SUMMARY
          echo "docker pull flowerrealm/oi-code-clang:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker pull flowerrealm/oi-code-clang:v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Platform-specific tags" >> $GITHUB_STEP_SUMMARY
          echo "docker pull flowerrealm/oi-code-clang:amd64" >> $GITHUB_STEP_SUMMARY
          echo "docker pull flowerrealm/oi-code-clang:arm64" >> $GITHUB_STEP_SUMMARY
          echo "docker pull flowerrealm/oi-code-clang:amd64-win" >> $GITHUB_STEP_SUMMARY
          echo "docker pull flowerrealm/oi-code-clang:arm64-win" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Usage Examples" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Basic usage" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm flowerrealm/oi-code-clang:latest clang --version" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Compile C++ code" >> $GITHUB_STEP_SUMMARY
          echo "docker run -v \$(pwd):/work -w /work flowerrealm/oi-code-clang:latest \\" >> $GITHUB_STEP_SUMMARY
          echo "  clang++ solution.cpp -o solution -O2 -std=c++17" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Interactive coding" >> $GITHUB_STEP_SUMMARY
          echo "docker run -it --rm -v \$(pwd):/work -w /work flowerrealm/oi-code-clang:latest bash" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
