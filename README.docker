# OI-Code Clang Docker 镜像文档

本目录包含 OI-Code 扩展的 Docker Clang 镜像自动化构建和发布配置。

## 🎯 核心特性

OI-Code 使用基于 **Ubuntu 24.04 + Clang 18.1.8** 的镜像，提供：

- **全自动化构建**: GitHub Actions 自动构建和发布
- **统一工具链**: 使用 Clang 替换 GCC，确保一致性和性能
- **跨平台兼容**: 支持 Linux/macOS/Windows (通过 Docker Desktop)
- **构建缓存优化**: 使用 Docker 构建缓存加速 CI/CD 流程
- **安全认证**: 使用 Docker Hub 个人访问令牌

## 📦 可用镜像标签

```bash
🐳 flowerrealm/oi-code-clang:latest      # 最新版本
🐳 flowerrealm/oi-code-clang:v{x.y.z}   # 版本标签
🪟 flowerrealm/oi-code-clang:latest-win # Windows版本
```

## 📋 使用方法

### 基本使用

```bash
# 拉取最新版镜像
docker pull flowerrealm/oi-code-clang:latest

# 验证 Clang 安装
docker run --rm flowerrealm/oi-code-clang:latest clang++ --version

# 快速编译测试
echo '#include <iostream>
int main() { std::cout << "Hello OI!" << std::endl; return 0; }' > test.cpp

docker run --rm -v $(pwd):/workspace -w /workspace \
  flowerrealm/oi-code-clang:latest bash -c "clang++ test.cpp -o test && ./test"
```

### 交互式使用

```bash
# 进入容器调试
docker run -it --rm flowerrealm/oi-code-clang:latest /bin/bash

# 可用工具: clang, clang++, lldb, lld, valgrind
```

### OI-Code 扩展集成

扩展会自动使用镜像，无需手动配置。如需自定义：

```json
{
  "oicode.docker.compilers": {
    "cpp": "flowerrealm/oi-code-clang:latest",
    "c": "flowerrealm/oi-code-clang:latest"
  }
}
```

### 🔧 技术架构

#### 🐳 Dockerfile 简介

```dockerfile
FROM ubuntu:24.04
ENV DEBIAN_FRONTEND=noninteractive

# Detect architecture for architecture-specific optimizations
ARG TARGETARCH
ENV TARGETARCH=${TARGETARCH}

# 安装 Clang 18 核心工具链（竞技编程优化）
RUN echo "Building for architecture: $TARGETARCH" && \
    apt-get update --quiet && \
    apt-get install -y --no-install-recommends \
        clang-18 \
        clang++-18 \
        valgrind \
        libc6-dev \
        libc++-18-dev \
        libc++abi-18-dev \
        libstdc++-13-dev \
        libboost-dev \
        libgmp-dev \
        libmpfr-dev \
        lldb-18 \
        && \
    # 创建符号链接
    ln -sf /usr/bin/clang-18 /usr/bin/clang && \
    ln -sf /usr/bin/clang++-18 /usr/bin/clang++ && \
    # 创建运行用户
    useradd -m -s /bin/bash runner && \
    mkdir -p /sandbox && \
    chown -R runner:runner /sandbox && \
    # 清理缓存
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    # 验证安装
    echo "Verifying installations for $TARGETARCH architecture:" && \
    clang --version && \
    clang++ --version && \
    echo "Architecture verification complete"

# Switch to non-privileged user for security
USER runner
WORKDIR /sandbox
```

#### 🛠️ 预装工具

**Clang 工具链 (版本 18)**:
- `clang` / `clang++` - C/C++ 编译器
- `clang-18` / `clang++-18` - 完整版本编译器

**开发库和运行时**:
- `libc6-dev` - C 标准库开发文件
- `libc++-18-dev` - LLVM C++ 标准库
- `libc++abi-18-dev` - LLVM C++ ABI 库
- `libstdc++-13-dev` - GNU C++ 标准库

**竞技编程常用库**:
- `libboost-dev` - Boost C++ 库
- `libgmp-dev` - 大数运算库
- `libmpfr-dev` - 多精度浮点运算库

**调试工具 (ARM64)**:
- `lldb-18` - LLVM 调试器

#### ⚡ 性能优化

- **最小化镜像**: 基于 Ubuntu 24.04，去除了不必要的包
- **构建缓存**: 多层缓存优化，显著提速 CI/CD
- **网络优化**: 使用官方 Ubuntu 源确保最大兼容性
- **安全配置**: 非root用户运行，隔离文件系统

### 🔐 安全配置

#### 🏷️ 镜像安全特性

- ✅ **最小化攻击面**: 只包含必要的编译工具
- ✅ **网络隔离**: 容器内网络访问受限
- ✅ **文件隔离**: 源代码独立挂载，防止数据泄露
- ✅ **权限控制**: 非root用户运行应用

#### 🔑 Docker Hub 认证

使用个人访问令牌而非密码：

```bash
# 设置环境变量
export DOCKERHUB_TOKEN="your-token-here"

# 或使用发布脚本 (自动处理令牌认证)
./push-to-dockerhub.sh --all
```

### 📊 CI/CD 集成

#### 🚀 GitHub Actions 工作流

`.github/workflows/ci.yml` 提供了完整的自动化流程：

```yaml
# 主要作业
- test:          # 14种平台矩阵测试
- deploy-docker: # 自动构建和发布镜像

# 触发条件
- push to main + manual deployment
- 自动生成版本标签
- 构建缓存管理
```

#### 🧪 本地开发

开发过程中使用发布脚本：

```bash
# 构建并推送所有版本
./push-to-dockerhub.sh --all

# 构建但不推送 (测试)
./push-to-dockerhub.sh --build-only

# 推送特定版本
./push-to-dockerhub.sh --version v1.2.3
```

### 🎵 故障排除

#### 🚨 镜像拉取失败

```bash
# 清理缓存并重试
docker system prune -a
docker pull flowerrealm/oi-code-clang:latest

# 故障排除
docker logs <container_id>
```

#### 🐛 编译错误

```bash
# 检查 Clang 版本
docker run --rm flowerrealm/oi-code-clang:latest clang++ --version

# 使用特定标准
clang++ main.cpp -std=c++17 -o main

# 启用调试信息
clang++ main.cpp -g -O0 -o main
```

#### 🖥️ Windows 兼容问题

对于 Windows 用户，推荐使用 Docker Desktop 的 Linux 容器模式：

```powershell
# 检查容器模式
docker version

# 切换到 Linux 容器 (如果需要)
# Docker Desktop > Settings > General
```

#### 📱 网络连接问题

如果遇到网络超时：

```bash
# 检查网络连接
curl -I https://hub.docker.com

# 使用代理 (如果公司网络需要)
export HTTP_PROXY=http://proxy.company.com:8080
./push-to-dockerhub.sh --all
```

### 📚 迁移指南

#### 📈 从 GCC 迁移

旧版本使用了 GCC，新版本自动使用 Clang：

```diff
# 旧版本 (在容器内安装 gcc)
- apt-get install -y gcc g++
- gcc/g++ main.cpp -o main

# 新版本 (预装 Clang)
+ clang++ main.cpp -o main  # 无需安装
+ clang --version           # 验证安装
```

#### 🔄 版本兼容性

- ✅ **向后兼容**: 仍然支持 `c++17`, `c11` 等标准
- ✅ **语法兼容**: Clang 完全兼容 GCC 语法
- ✅ **库兼容**: libc++ 和 libstdc++ 兼容
- ✅ **扩展支持**: Clang 特定的扩展支持

### 🔗 完整集成

#### 📋 推荐的完整流程

1. **开发阶段**: 本地使用自动拉取的镜像
2. **测试阶段**: GitHub Actions 自动测试
3. **发布阶段**: 自动构建并推送新版本
4. **使用阶段**: OI-Code 扩展无缝使用新镜像

#### 🌟 项目链接

- 🔗 **GitHub 仓库**: https://github.com/FlowerRealm/oi-code-extension
- 🐳 **Docker Hub**: https://hub.docker.com/r/flowerrealm/oi-code-clang
- 📖 **VS Code 扩展**: [OI-Code in VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=FlowerRealm.oi-code)

### 📝 更新日志

- **v1.0.0**: 初始 Clang 18 自动发布
  - Ubuntu 24.04 LTS 基础
  - 完整的 LLVM/Clang 工具链
  - GitHub Actions CI/CD 集成
  - 构建缓存和性能优化
  - 跨平台兼容性改进

## 🛠️ 高级用法

### 手动构建镜像

```bash
# 手动构建 Linux 镜像
docker build -t oi-code-clang:latest -f Dockerfile .

# 构建 Windows 镜像
docker build -t oi-code-clang:latest-win -f Dockerfile.windows.amd64 .
```

### 多平台构建

```bash
# 创建多平台构建器
docker buildx create --use

# 构建多平台镜像
docker buildx build --platform linux/amd64 -t flowerrealm/oi-code-clang:latest --push .
```

## ⚠️ 已知限制

- **镜像大小**: Clang 工具链会显著增加镜像大小（约1GB）
- **Windows容器**: 需要在 Windows 主机上构建 Windows 容器
- **网络依赖**: 构建过程需要稳定的网络连接
