name: OI-Code Multi-Platform Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - linux
          - windows
          - test

jobs:
  # 理解项目和代码检查
  analyze:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    outputs:
      changed-files: ${{ steps.files.outputs.all_changed_files }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: files
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "all_changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | tr '\n' ' ')" >> $GITHUB_OUTPUT
          else
            echo "all_changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | tr '\n' ' ')" >> $GITHUB_OUTPUT
          fi

      - name: Get version
        id: version
        run: |
          if [ -f package.json ]; then
            VERSION=$(node -p "require('./package.json').version")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "version=0.0.1" >> $GITHUB_OUTPUT
          fi

  # 构建Linux镜像
  build-linux:
    needs: analyze
    if: |
      contains(needs.analyze.outputs.changed-files, 'Dockerfile') ||
      github.event_name == 'workflow_dispatch' ||
      needs.analyze.outputs.version != ''
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [amd64, arm64]
    environment: ${{ inputs.environment || 'development' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup QEMU (for cross-platform)
        if: matrix.platform == 'arm64'
        uses: docker/setup-qemu-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: flowerrealm
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: flowerrealm/oi-code-clang
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value={{branch}}-{{sha}}-{{date 'YYYYMMDD'}}
            type=raw,value={{branch}}-linux-${{ matrix.platform }}
            type=raw,value=v${{ needs.analyze.outputs.version }}-linux-${{ matrix.platform }}

      - name: Build and push Linux image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/${{ matrix.platform }}
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=flowerrealm/oi-code-clang:cache
          cache-to: type=registry,ref=flowerrealm/oi-code-clang:cache,mode=max

  # 构建Windows镜像
  build-windows:
    needs: analyze
    if: |
      contains(needs.analyze.outputs.changed-files, 'Dockerfile.windows') ||
      github.event_name == 'workflow_dispatch' ||
      needs.analyze.outputs.version != ''
    runs-on: windows-latest
    environment: ${{ inputs.environment || 'development' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: flowerrealm
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: flowerrealm/oi-code-clang
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value={{branch}}-{{sha}}-windows-amd64
            type=raw,value={{branch}}-windows-amd64
            type=raw,value=v${{ needs.analyze.outputs.version }}-windows-amd64

      - name: Build and push Windows image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: windows/amd64
          file: Dockerfile.windows
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=flowerrealm/oi-code-clang:cache-windows
          cache-to: type=registry,ref=flowerrealm/oi-code-clang:cache-windows,mode=max

  # 创建multi-arch manifest
  create-manifest:
    needs: [build-linux, build-windows]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: flowerrealm
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Create multi-arch manifest
        run: |
          VERSION="${{ needs.analyze.outputs.version }}"
          BRANCH="${{ github.ref_name }}"

          # 为main分支创建latest标签
          docker buildx imagetools create --tag flowerrealm/oi-code-clang:latest \
            flowerrealm/oi-code-clang:"${BRANCH}"-linux-amd64 \
            flowerrealm/oi-code-clang:"${BRANCH}"-linux-arm64 \
            flowerrealm/oi-code-clang:"${BRANCH}"-windows-amd64

          # 为特定版本创建标签
          if [ "$VERSION" ]; then
            docker buildx imagetools create --tag flowerrealm/oi-code-clang:"v${VERSION}" \
              flowerrealm/oi-code-clang:"${BRANCH}"-linux-amd64 \
              flowerrealm/oi-code-clang:"${BRANCH}"-linux-arm64 \
              flowerrealm/oi-code-clang:"${BRANCH}"-windows-amd64
          fi

  # 测试构建的镜像
  test-builds:
    needs: create-manifest
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [amd64, arm64]
        os: [linux, windows]
        exclude:
          # 只在QEMU可用时测试ARM64
          - platform: arm64
            os: windows
    environment: production
    steps:
      - name: Test Linux images
        if: matrix.os == 'linux'
        run: |
          echo "Testing Linux ${{ matrix.platform }} image..."
          docker run --rm --platform linux/${{ matrix.platform }} \
            flowerrealm/oi-code-clang:latest \
            clang --version || exit 1

          docker run --rm --platform linux/${{ matrix.platform }} \
            flowerrealm/oi-code-clang:latest \
            clang++ --version || exit 1

      - name: Test Windows images
        if: matrix.os == 'windows' && matrix.platform == 'amd64'
        run: |
          echo "Testing Windows amd64 image..."
          docker run --rm --platform windows/amd64 \
            flowerrealm/oi-code-clang:latest \
            cmd /C "echo Windows Clang Environment Ready" || exit 1

  # 构建和测试VS Code扩展
  build-extension:
    needs: analyze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run compile

      - name: Lint and format
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-linux
          path: test-output.log

  # 生成发布说明
  release-notes:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [create-manifest, test-builds, build-extension]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.analyze.outputs.version }}"
          BRANCH="${{ github.ref_name }}"

          cat << EOF > release_body.txt
          ## 🚀 OI-Code Extension v${VERSION}

          ### 🐳 新增的 Docker 镜像

          **多平台镜像构建完成:**
          - Linux AMD64/ARM64: \`flowerrealm/oi-code-clang:latest\`
          - Windows AMD64: \`flowerrealm/oi-code-clang:latest\`
          - 架构标签: \`v${VERSION}\`, \`latest\`

          ### 🏗️ 构建特性

          - **跨平台支持**: Linux/AMD64, Linux/ARM64, Windows/AMD64
          - **缓存优化**: 构建缓存显著加速 CI/CD 流程
          - **安全性**: 非特权用户运行，健康检查集成
          - **最小化设计**: 移除不必要的调试工具，优化镜像大小

          ### 🔧 技术栈

          - **编译器**: Clang 18.1.8 with libc++
          - **竞赛库**: Boost, GMP, MPFR
          - **系统库**: GCC 兼容性, 标准庫
          - **运行时**: Ubuntu 24.04 LTS 基础

          ### 🎯 使用方法

          \`\`\`bash
          # Linux 环境使用
          docker run --rm flowerrealm/oi-code-clang:latest clang++ -std=c++17 solution.cpp -o solution

          # Windows 环境使用
          docker run -it --rm flowerrealm/oi-code-clang:latest cmd
          \`\`\`

          ### 🔍 镜像详情

          镜像已通过多平台兼容性测试，包含：
          - 完整的竞赛编程工具链
          - 支持 C++11/14/17/20 标准
          - 竞赛专用数据结构库
          - 高精度算法库支持

          ---
          🌟 **构建信息**：
          - 分支: \`${BRANCH}\`
          - 提交: \`${{ github.sha }}\`
          - 作者: @${{ github.actor }}
          - 时间: $(date -Iseconds)
          EOF

          cat release_body.txt >> $GITHUB_STEP_SUMMARY
          echo "notes_file=release_body.txt" >> $GITHUB_OUTPUT

      - name: Create Release (if applicable)
        if: startsWith(github.event.head_commit.message, 'Bump version')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.analyze.outputs.version }}
          release_name: OI-Code Extension v${{ needs.analyze.outputs.version }}
          body_path: release_body.txt
          draft: false
          prerelease: false

  # 清理构建缓存
  cleanup:
    if: always()
    needs: [create-manifest, test-builds, build-extension, release-notes]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Clean up registry
        if: github.event_name == 'schedule'
        run: |
          echo "定期清理老镜像标签..."
          # 保留最近5个版本
          docker run --rm luraproject/lura \
            flowerrealm/oi-code-clang \
            --max-tags 5 \
            --dry-run
